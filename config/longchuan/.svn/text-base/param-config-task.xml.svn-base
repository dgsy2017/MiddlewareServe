<?xml version="1.0" encoding="UTF-8"?>
<param-config>
  <its>
  	<!--定时器任务-->
  	<timers>    	
  		
		<!--将有效的违法车辆数据导出到指定目录并生成xml的文本文件(文件名由设备编号+抓拍编号组成)-->
  		<task run="true" imp_class="com.its.core.local.longchuan.task.ExportViolateFileTask">  			
  			
  			<!--每次运行间隔时间：秒-->
  			<period>10</period>  				
		  	
			<!-- 图片压缩(取值从0.1~0.9，0.1表示最大限度压缩，-1表示不压缩） -->
  			<image_quality>0.5</image_quality>

		  	<!--图片和XML文件导出目录-->  			
			<image_export_dir>D:/export/</image_export_dir>
			
			<sql
			    select_violate_record_sql = "select a.id,a.plate,a.plate_type_id,a.violate_time,c.code dept_code,b.code road_code,b.remark road_segment,b.tp_road_code road_distance,b.name road_name,a.device_id,a.line,a.speed,a.limit_speed,a.image_path_1,a.image_path_2,a.image_path_3 from T_ITS_VIOLATE_RECORD_TEMP a left join T_ITS_ROAD b on a.road_id = b.id left join T_ITS_DEPT c on b.dept_id=c.id where a.status = 'N'"  
  		        update_violate_record_sql = "update T_ITS_VIOLATE_RECORD_TEMP set status = 'Y' where id = ?"
  		    />  			  			
  		</task>
  		
  		<!-- 定时上传指定目录的文件到FTP服务器上 -->
  		<task run="true" imp_class="com.its.core.module.task.impl.UploadToFtpServerTask">
  			<!--每次运行间隔时间：秒-->
  			<period>180</period>
  			
  			<!-- 
  				FTP Server配置信息
  				host		: FTP Server主机
  				port		: 端口
  				account		: 帐号
  				password	: 密码
  			 -->
  			<ftp_server
  				host		= "10.171.13.241"
  				port		= "21"
  				account		= "lcdd"
  				password	= "lcdd"
  			/>
  			
  			<!-- 文件名或目录如果含有中文,请使用该参数 -->
  			<file_name_encoding>GBK</file_name_encoding>
  			
			<dirs>
				<!-- 
					本地目录配置
					path								: 目录路径
					include_subdirectory				: 上传时是否包含子目录下的文件
					create_subdirectory_at_ftpserver	: 上传时是否在FTP Server上创建同名子目录,include_subdirectory必须设为true这个参数才有效,如果这个参数设为false,则全部上传到根目录下.(注意:如为true,则要求帐号具有创建目录的权限)
					delete_local_subdirectory			: 上传成功后,是否删除本地空目录
					file_type							: 文件类型,分为binary或ascii
				 -->
				<dir
					path 								= "D:/export/"
					include_subdirectory				= "true"
					create_subdirectory_at_ftpserver	= "true"
					delete_local_empty_subdirectory		= "true"
					file_type							= "binary"
				/>								
			</dirs>
  		</task>

  		<!-- 间隔一段时间定时执行给定的SQL语句 -->
  		<task run="true" imp_class="com.its.core.module.task.impl.ExecuteSqlTimerTask">
  			
  			<!--每次运行间隔时间：秒-->
  			<period>600</period>
			
			<sql_list>
				<sql value="delete T_ITS_VIOLATE_RECORD_TEMP where STATUS='F' or STATUS='C'"/>
				<sql value="update T_ITS_DEVICE_STATUS set last_connect_time=sysdate"/>
				<sql value="delete T_ITS_VIOLATE_RECORD where finish_flag='D'"/>
				<sql value="delete T_ITS_SYSTEM_LOG t where trunc(sysdate-log_time)>=30"/>
				<sql value="delete T_ITS_SYSTEM_EXCEPTION_LOG where trunc(sysdate-create_time)>=30"/>								
				<sql value="update t_its_blacklist t set watch_expire='Y' where watch_circle = 0 and watch_expire = 'N'and watch_end_time &lt; sysdate"/>
			</sql_list>
			  			
  		</task>
  		
  		<!--清理T_ITS_VEHICLE_RECORD_HISTORY中超过特定期限的数据-->
  		<task run="true" imp_class="com.its.core.module.task.impl.VehicleRecordHistoryCleanTask">
  		  			
  			<start_hour>20</start_hour>
  			<stop_hour>23</stop_hour>
  			
  			<!--清理周期，单位：天，清除超过多少天的数据 -->
  			<clean_cycle>180</clean_cycle>
  			
  			<sql
  				select_overtime_history = "select * from T_ITS_VEHICLE_RECORD_HISTORY where trunc(sysdate-END_TIME)>?"
  				delete_overtime_history_data = "drop table ${TAB_NAME}"
  				delete_vehicle_record = "delete T_ITS_VEHICLE_RECORD_HISTORY where id=?"
  			/>  			
  			
  		</task>
  		
  		<!-- 将实时车辆信息（T_ITS_VEHICLE_RECORD）超过历史记录表（T_ITS_VEHICLE_RECORD_HISTORY）中的最早记录导入第一张历史表中 -->
  		<task run="true" imp_class="com.its.core.module.task.impl.ClearExpireVehicleDataTask">
  		  			
  			<!--每次运行间隔时间：秒-->
  			<period>3600</period>
  			
  			<sql
  				select_last_history = "select * from T_ITS_VEHICLE_RECORD_HISTORY order by end_time desc"
  				transfer_vehicle_record = "insert into ${tableName} (select * from T_ITS_VEHICLE_RECORD where CATCH_TIME between ? and ?)"
  				delete_overtime_history = "delete T_ITS_VEHICLE_RECORD where CATCH_TIME between ? and ?"
  			/>  			
  			
  		</task>
  		
  		<!--将实时车辆信息（T_ITS_VEHICLE_RECORD）过期的记录导入历史记录表中-->
  		<task run="true" imp_class="com.its.core.module.task.impl.VechileRecordHistoryAndTablespaceBackupTask">  			
  			
  			<start_hour>21</start_hour>
  			<stop_hour>23</stop_hour>
  			
  			<!-- 备份周期，单位：天，超过多少天的数据备份到历史记录表中 -->
  			<backup_cycle>15</backup_cycle>
  			
  			<!-- 默认实时车辆信息（T_ITS_VEHICLE_RECORD）记录缓存天数 -->
  			<cache_day>1</cache_day>
  			
  			<sql>
  				<oracle>
  					<select_last_history>select * from T_ITS_VEHICLE_RECORD_HISTORY order by end_time desc</select_last_history>
  					<select_first_vehicle_record>select * from ( select row_.*, rownum rownum_ from (select * from T_ITS_VEHICLE_RECORD order by catch_time) row_) where rownum=1</select_first_vehicle_record>
  					<insert_vehicle_record_history>insert into T_ITS_VEHICLE_RECORD_HISTORY (ID, TABLE_NAME, START_TIME, END_TIME, RECORD_COUNT, CREATE_TIME) values (?,?,?,?,?,?)</insert_vehicle_record_history>
  					<create_history>
  						<check_exist>select * from USER_TABLES where TABLE_NAME='T_ITS_VEHICLE_RECORD_${YYYYMMDD}'</check_exist>
						<tablespace>
						    create tablespace ITS_${YYYYMMDD} 
							logging datafile 'D:\app\Administrator\oradata\orcl\ITS_${YYYYMMDD}.dbf' 
							size 50M
							autoextend on  
							next 3M maxsize 32767M
							extent management local
						</tablespace>
						<table>
							CREATE TABLE T_ITS_VEHICLE_RECORD_${YYYYMMDD}
							(
							  id                  NUMBER(20) not null,
							  plate               VARCHAR2(16),
							  plate_color_code    NUMBER(1),
							  catch_time          DATE not null,
							  road_id             NUMBER(8),
							  device_id           VARCHAR2(32) not null,
							  direction_code      VARCHAR2(1),
							  direction_drive     VARCHAR2(1) default '0' not null,
							  driveway_no         VARCHAR2(2),
							  speed               NUMBER(3),
							  limit_speed         NUMBER(3),
							  alarm_type_id       VARCHAR2(1),
							  blacklist_type_id   NUMBER(8),
							  feature_image_path  VARCHAR2(160),
							  panorama_image_path VARCHAR2(160),
							  create_time         DATE not null,
							  status              VARCHAR2(2) default 'N' not null
							)		
							tablespace ITS_${YYYYMMDD}
							pctfree 10
							initrans 1
							maxtrans 255
							storage
							(
							  initial 64K
							  minextents 1
							  maxextents unlimited
							)			
						</table>
						<index>
							CREATE UNIQUE INDEX PK_VEH_PASS_RECORD_${YYYYMMDD} ON T_ITS_VEHICLE_RECORD_${YYYYMMDD} (ID);
							CREATE INDEX ID_VRCT_${YYYYMMDD} ON T_ITS_VEHICLE_RECORD_${YYYYMMDD} (CATCH_TIME);
							CREATE INDEX ID_VRRI_${YYYYMMDD} ON T_ITS_VEHICLE_RECORD_${YYYYMMDD} (ROAD_ID);
							CREATE INDEX ID_VRDC_${YYYYMMDD} ON T_ITS_VEHICLE_RECORD_${YYYYMMDD} (DIRECTION_CODE);
							CREATE INDEX ID_VRP_${YYYYMMDD} ON T_ITS_VEHICLE_RECORD_${YYYYMMDD} (PLATE);
							CREATE INDEX ID_VRPCC_${YYYYMMDD} ON T_ITS_VEHICLE_RECORD_${YYYYMMDD} (PLATE_COLOR_CODE);
							CREATE INDEX ID_VRDI_${YYYYMMDD} ON T_ITS_VEHICLE_RECORD_${YYYYMMDD} (DEVICE_ID);
							CREATE INDEX ID_VRDD_${YYYYMMDD} on T_ITS_VEHICLE_RECORD_${YYYYMMDD} (DIRECTION_DRIVE);
						</index>
						
  					</create_history>
  					<transfer>
  						<transfer_vehicle_record>insert into ${tableName} (select * from T_ITS_VEHICLE_RECORD where CATCH_TIME between ? and ?)</transfer_vehicle_record>
  						<select_overtime_vehicle_record>select count(*) as recordCount from T_ITS_VEHICLE_RECORD where trunc(sysdate-CATCH_TIME)>=?</select_overtime_vehicle_record>
  						<delete_vehicle_record>delete T_ITS_VEHICLE_RECORD where CATCH_TIME between ? and ?</delete_vehicle_record>
  					</transfer>
  				</oracle>
  			</sql>	
  		</task>				
  		
  	</timers>
  </its>
</param-config>
