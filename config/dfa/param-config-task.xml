<?xml version="1.0" encoding="UTF-8"?>
<param-config>
  <its>
  	<!--定时器任务-->
  	<timers>    	
  		
  		<!-- 电子警察违法接口测试版 -->
  		<task run="true" imp_class="com.its.core.local.dfa.task.ExportViolateToTestTask">  		    	  		
  			
  			<!--每次运行间隔时间：秒-->
			<period>3</period> 			
			
			<!-- 
				水印文字配置
				bg_height		: 背景高度
				font_size		: 字体尺寸
				font_height		: 字体高度
				font_color		: 字体颜色
				bg_color		: 字体背景颜色
				left_margin		: 左边留空白位置长度(用于调整字体位置)
				top_margin		: 上边留空白位置长度(用于调整字体位置)
			 -->
			<watermark	 	
			    bg_height   = "120"
			    font_size	= "80"
				font_height	= "80"
				font_color	= "white"
				bg_color	= "black"
				left_margin	= "10"
				top_margin	= "10"
			/> 			
  						
  			<sql>
  			    <select_unviolate_record>select * from T_ITS_VIOLATE_RECORD where id = 1701 and finish_flag='F' and record_type=0 and (whitelist is null or whitelist='N') order by violate_time desc</select_unviolate_record>
			    <update_violate_status>update T_ITS_VEH_VIO_RECORD set finish_flag='Y' where id=?</update_violate_status>
  			</sql>  			
  		</task>
  		
  		<!-- 间隔一段时间定时执行给定的SQL语句 -->
  		<task run="true" imp_class="com.its.core.module.task.impl.ExecuteSqlTimerTask">
  			
  			<!--每次运行间隔时间：秒-->
  			<period>3600</period>
			
			<sql_list>
				<sql value="delete T_ITS_VIOLATE_RECORD_TEMP where STATUS='F' or STATUS='C'"/>
				<sql value="delete T_ITS_VIOLATE_RECORD where finish_flag='D'"/>
				<sql value="delete T_ITS_SYSTEM_LOG t where trunc(sysdate-log_time)>=90"/>
				<sql value="delete T_ITS_SYSTEM_EXCEPTION_LOG where trunc(sysdate-create_time)>=90"/>
				<sql value="delete T_ITS_VIOLATE_DELETE_IMAGE where status = 'Y' and trunc(sysdate-confirm_time)>=7"/>				
				<sql value="update t_its_blacklist t set watch_expire='Y' where watch_circle = 0 and watch_expire = 'N'and watch_end_time &lt; sysdate"/>
			</sql_list>
			  			
  		</task>
  		
  		<!--清理T_ITS_VEHICLE_RECORD_HISTORY中超过特定期限的数据-->
  		<task run="true" imp_class="com.its.core.module.task.impl.VehicleRecordHistoryCleanTask">
  		  			
  			<start_hour>20</start_hour>
  			<stop_hour>23</stop_hour>
  			
  			<!--清理周期，单位：天，清除超过多少天的数据 -->
  			<clean_cycle>180</clean_cycle>
  			
  			<sql
  				select_overtime_history = "select * from T_ITS_VEHICLE_RECORD_HISTORY where trunc(sysdate-END_TIME)>?"
  				delete_overtime_history_data = "drop table ${TAB_NAME}"
  				delete_overtime_history = "delete T_ITS_VEHICLE_RECORD_HISTORY where id=?"
  			/>  			
  			
  		</task>
  		
  		<!--将实时车辆信息（T_ITS_VEHICLE_RECORD）过期的记录导入历史记录表中-->
  		<task run="true" imp_class="com.its.core.module.task.impl.VechileRecordHistoryBackupTask">    		    	
  			
  			<start_hour>21</start_hour>
  			<stop_hour>23</stop_hour>
  			
  			<!-- 备份周期，单位：天，超过多少天的数据备份到历史记录表中 -->
  			<backup_cycle>15</backup_cycle>
  			
  			<!-- 默认实时车辆信息（T_ITS_VEHICLE_RECORD）记录缓存天数 -->
  			<cache_day>1</cache_day>
  			
  			<sql>
  				<oracle>
  					<select_last_history>select * from T_ITS_VEHICLE_RECORD_HISTORY order by end_time desc</select_last_history>
  					<select_first_vehicle_record>select * from ( select row_.*, rownum rownum_ from (select * from T_ITS_VEHICLE_RECORD order by catch_time) row_) where rownum=1</select_first_vehicle_record>
  					<insert_vehicle_record_history>insert into T_ITS_VEHICLE_RECORD_HISTORY (ID, TABLE_NAME, START_TIME, END_TIME, RECORD_COUNT, CREATE_TIME) values (?,?,?,?,?,?)</insert_vehicle_record_history>
  					<create_history>
  						<check_exist>select * from USER_TABLES where TABLE_NAME='T_ITS_VEHICLE_RECORD_${YYYYMMDD}'</check_exist>
						<table>
							CREATE TABLE T_ITS_VEHICLE_RECORD_${YYYYMMDD}
							(
							  id                  NUMBER(20) not null,
							  plate               VARCHAR2(16),
							  plate_color_code    NUMBER(1),
							  catch_time          DATE not null,
							  road_id             NUMBER(8),
							  device_id           VARCHAR2(32) not null,
							  direction_code      VARCHAR2(1),
							  direction_drive     VARCHAR2(1) default '0' not null,
							  driveway_no         VARCHAR2(2),
							  speed               NUMBER(3),
							  limit_speed         NUMBER(3),
							  alarm_type_id       VARCHAR2(1),
							  blacklist_type_id   NUMBER(8),
							  feature_image_path  VARCHAR2(160),
							  panorama_image_path VARCHAR2(160),
							  create_time         DATE not null,
							  status              VARCHAR2(2) default 'N' not null
							)						
						</table>
						<index>
							CREATE UNIQUE INDEX PK_VEH_PASS_RECORD_${YYYYMMDD} ON T_ITS_VEHICLE_RECORD_${YYYYMMDD} (ID);
							CREATE INDEX ID_VRCT_${YYYYMMDD} ON T_ITS_VEHICLE_RECORD_${YYYYMMDD} (CATCH_TIME);
							CREATE INDEX ID_VRRI_${YYYYMMDD} ON T_ITS_VEHICLE_RECORD_${YYYYMMDD} (ROAD_ID);
							CREATE INDEX ID_VRDC_${YYYYMMDD} ON T_ITS_VEHICLE_RECORD_${YYYYMMDD} (DIRECTION_CODE);
							CREATE INDEX ID_VRP_${YYYYMMDD} ON T_ITS_VEHICLE_RECORD_${YYYYMMDD} (PLATE);
							CREATE INDEX ID_VRPCC_${YYYYMMDD} ON T_ITS_VEHICLE_RECORD_${YYYYMMDD} (PLATE_COLOR_CODE);
							CREATE INDEX ID_VRDI_${YYYYMMDD} ON T_ITS_VEHICLE_RECORD_${YYYYMMDD} (DEVICE_ID);
							CREATE INDEX ID_VRDD_${YYYYMMDD} on T_ITS_VEHICLE_RECORD_${YYYYMMDD} (DIRECTION_DRIVE);
						</index>
						
  					</create_history>
  					<transfer>
  						<transfer_vehicle_record>insert into ${tableName} (select * from T_ITS_VEHICLE_RECORD where CATCH_TIME between ? and ?)</transfer_vehicle_record>
  						<select_overtime_vehicle_record>select count(*) as recordCount from T_ITS_VEHICLE_RECORD where trunc(sysdate-CATCH_TIME)>=?</select_overtime_vehicle_record>
  						<delete_vehicle_record>delete T_ITS_VEHICLE_RECORD where CATCH_TIME between ? and ?</delete_vehicle_record>
  					</transfer>
  				</oracle>
  			</sql>	
  		</task>				
  		
  	</timers>
  </its>
</param-config>
